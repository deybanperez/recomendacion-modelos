#Now we will start with the items from homework
#1) Modify order in the transactions
colnames(df_periodico)[5] = "items"
split = split[-bots]
articles = lapply(split, subString)
df_periodico$articles = lapply(articles, convertFormat)
#3)
articles = df_periodico$articles
class(articles[[1]])
list = lapply(articles,strsplit, split = ",")
list = lapply(list, unlist)
transactions = as(list, "transactions")
sort(itemFrequency(transactions, type = "absolute"), decreasing = TRUE)[1:10]
FP
FP/N
returnFP
newOrder = order(Score, decreasing = TRUE)
scores = Score[newOrder]
real = Class[newOrder]
target = Target
returnTP = vector(mode = "numeric", length = length(scores) + 1)
returnFP = vector(mode = "numeric", length = length(scores) + 1)
scorePrev = Inf
FP = 0
TP = 0
i = 1
P = length(real[real == target])
N = length(real) - P
while (i <= length(scores))
{
if(scores[i] != scorePrev)
{
returnTP[i] = TP/P
returnFP[i] = FP/N
scorePrev = scores[i]
}
if(real[i] == target)
{
TP = TP + 1
}else
{
FP = FP  +1
}
i = i+1
}
returnFP[length(scores)+1]
returnFP[length(scores)+1] = 1
returnTP[length(scores)+1] = 1
plot(returnFP, returnTP, type = "b")
abline(0,1)
Score = c("0.9","0.8","0.7","0.6","0.55","0.55","0.55","0.52","0.51","0.505",
"0.4","0.39","0.38","0.37","0.36","0.35","0.34","0.33","0.30","0.1")
Score = c("0.9","0.8","0.7","0.6","0.55","0.55","0.55","0.52","0.51","0.505",
"0.4","0.39","0.38","0.37","0.36","0.35","0.34","0.33","0.30","0.1")
Score = as.numeric(Score)
newOrder = order(Score, decreasing = TRUE)
scores = Score[newOrder]
real = Class[newOrder]
target = Target
returnTP = vector(mode = "numeric", length = length(scores) + 1)
returnFP = vector(mode = "numeric", length = length(scores) + 1)
scorePrev = Inf
FP = 0
TP = 0
i = 1
P = length(real[real == target])
N = length(real) - P
while (i <= length(scores))
{
if(scores[i] != scorePrev)
{
returnTP[i] = TP/P
returnFP[i] = FP/N
scorePrev = scores[i]
}
if(real[i] == target)
{
TP = TP + 1
}else
{
FP = FP  +1
}
i = i+1
}
returnFP[length(scores)+1] = 1
returnTP[length(scores)+1] = 1
plot(returnFP, returnTP, type = "b")
abline(0,1)
newOrder = order(Score, decreasing = TRUE)
scores = Score[newOrder]
real = Class[newOrder]
target = Target
returnTP = vector(mode = "numeric", length = length(scores) + 1)
returnFP = vector(mode = "numeric", length = length(scores) + 1)
scorePrev = Inf
FP = 0
TP = 0
i = 1
P = length(real[real == target])
N = length(real) - P
while (i <= length(scores))
{
if(scores[i] != scorePrev)
{
returnTP[i] = TP/P
returnFP[i] = FP/N
scorePrev = scores[i]
}
if(real[i] == target)
{
TP = TP + 1
}else
{
FP = FP  +1
}
i = i+1
}
returnFP[length(scores)+1] = 1
returnTP[length(scores)+1] = 1
plot(returnFP, returnTP, type = "b")
abline(0,1)
returnTP
newOrder = order(Score, decreasing = TRUE)
scores = Score[newOrder]
real = Class[newOrder]
target = Target
returnTP = vector(mode = "numeric")
returnFP = vector(mode = "numeric")
scorePrev = Inf
FP = 0
TP = 0
i = 1
P = length(real[real == target])
N = length(real) - P
while (i <= length(scores))
{
if(scores[i] != scorePrev)
{
returnTP[i] = TP/P
returnFP[i] = FP/N
scorePrev = scores[i]
}
if(real[i] == target)
{
TP = TP + 1
}else
{
FP = FP  +1
}
i = i+1
}
returnFP[length(returnFP)+1] = 1
returnTP[length(returnFP)+1] = 1
plot(returnFP, returnTP, type = "b")
abline(0,1)
newOrder = order(Score, decreasing = TRUE)
scores = Score[newOrder]
real = Class[newOrder]
target = Target
returnTP = vector(mode = "numeric")
returnFP = vector(mode = "numeric")
scorePrev = Inf
FP = 0
TP = 0
i = 1
P = length(real[real == target])
N = length(real) - P
while (i <= length(scores))
{
if(scores[i] != scorePrev)
{
returnTP[i] = TP/P
returnFP[i] = FP/N
scorePrev = scores[i]
}
if(real[i] == target)
{
TP = TP + 1
}else
{
FP = FP  +1
}
i = i+1
}
returnFP[length(returnFP)+1] = 1
returnTP[length(returnFP)+1] = 1
returnFP
newOrder = order(Score, decreasing = TRUE)
scores = Score[newOrder]
real = Class[newOrder]
target = Target
returnTP = vector(mode = "numeric")
returnFP = vector(mode = "numeric")
scorePrev = Inf
FP = 0
TP = 0
i = 1
P = length(real[real == target])
N = length(real) - P
while (i <= length(scores))
{
if(scores[i] != scorePrev)
{
returnTP[i] = TP/P
returnFP[i] = FP/N
scorePrev = scores[i]
}
if(real[i] == target)
{
TP = TP + 1
}else
{
FP = FP  +1
}
i = i+1
}
returnFP[length(returnFP)+1] = 1
returnTP[length(returnFP)+1] = 1
Class = c("p","p","n","p","p","p","n","n","p","n",
"p","n","p","n","n","n","p","n","p","n")
Score = c("0.9","0.8","0.7","0.6","0.55","0.55","0.55","0.52","0.51","0.505",
"0.4","0.39","0.38","0.37","0.36","0.35","0.34","0.33","0.30","0.1")
Score = as.numeric(Score)
Target = "p"
newOrder = order(Score, decreasing = TRUE)
scores = Score[newOrder]
real = Class[newOrder]
target = Target
returnTP = vector(mode = "numeric")
returnFP = vector(mode = "numeric")
scorePrev = Inf
FP = 0
TP = 0
i = 1
P = length(real[real == target])
N = length(real) - P
while (i <= length(scores))
{
if(scores[i] != scorePrev)
{
returnTP[i] = TP/P
returnFP[i] = FP/N
scorePrev = scores[i]
}
if(real[i] == target)
{
TP = TP + 1
}else
{
FP = FP  +1
}
i = i+1
}
returnFP[length(returnFP)+1] = 1
returnTP[length(returnFP)+1] = 1
returnFP
Class = c("p","p","n","p","p","p","n","n","p","n",
"p","n","p","n","n","n","p","n","p","n")
Score = c("0.9","0.8","0.7","0.6","0.55","0.55","0.55","0.52","0.51","0.505",
"0.4","0.39","0.38","0.37","0.36","0.35","0.34","0.33","0.30","0.1")
Score = as.numeric(Score)
Target = "p"
newOrder = order(Score, decreasing = TRUE)
scores = Score[newOrder]
real = Class[newOrder]
target = Target
returnTP = vector(mode = "numeric")
returnFP = vector(mode = "numeric")
scorePrev = Inf
FP = 0
TP = 0
i = 1
P = length(real[real == target])
N = length(real) - P
returnFP
returnFP[1] = 0
returnFP
returnFP[2] = 0
returnFP[2] = 0
returnFP
returnFP[2] = 1
returnFP
returnFP[3] = 1
returnFP
returntP[1] = 1
returnTP[1] = 1
returnTP[2] = 1
returnTP[2] = 0
returnTP
returnTP[3] = 0
returnTP
Class = c("p","p","n","p","p","p","n","n","p","n",
"p","n","p","n","n","n","p","n","p","n")
Score = c("0.9","0.8","0.7","0.6","0.55","0.55","0.55","0.52","0.51","0.505",
"0.4","0.39","0.38","0.37","0.36","0.35","0.34","0.33","0.30","0.1")
Score = as.numeric(Score)
Target = "p"
newOrder = order(Score, decreasing = TRUE)
scores = Score[newOrder]
real = Class[newOrder]
target = Target
returnTP = vector(mode = "numeric")
returnFP = vector(mode = "numeric")
scorePrev = Inf
FP = 0
TP = 0
i = 1
P = length(real[real == target])
N = length(real) - P
index = 1
while (i <= length(scores))
{
if(scores[i] != scorePrev)
{
returnTP[index] = TP/P
returnFP[index] = FP/N
scorePrev = scores[i]
index = index +1
}
if(real[i] == target)
{
TP = TP + 1
}else
{
FP = FP  +1
}
i = i+1
}
returnTP
returnFP
newOrder = order(Score, decreasing = TRUE)
scores = Score[newOrder]
real = Class[newOrder]
target = Target
returnTP = vector(mode = "numeric")
returnFP = vector(mode = "numeric")
scorePrev = Inf
FP = 0
TP = 0
i = 1
P = length(real[real == target])
N = length(real) - P
index = 1
while (i <= length(scores) + 1)
{
if(scores[i] != scorePrev)
{
returnTP[index] = TP/P
returnFP[index] = FP/N
scorePrev = scores[i]
index = index +1
}
if(real[i] == target)
{
TP = TP + 1
}else
{
FP = FP  +1
}
i = i+1
}
newOrder = order(Score, decreasing = TRUE)
scores = Score[newOrder]
real = Class[newOrder]
target = Target
returnTP = vector(mode = "numeric")
returnFP = vector(mode = "numeric")
scorePrev = Inf
FP = 0
TP = 0
i = 1
P = length(real[real == target])
N = length(real) - P
index = 1
while (i <= length(scores))
{
if(scores[i] != scorePrev)
{
returnTP[index] = TP/P
returnFP[index] = FP/N
scorePrev = scores[i]
index = index +1
}
if(real[i] == target)
{
TP = TP + 1
}else
{
FP = FP  +1
}
i = i+1
}
returnFP[length(returnFP)+1] = 1
returnTP[length(returnFP)+1] = 1
newOrder = order(Score, decreasing = TRUE)
scores = Score[newOrder]
real = Class[newOrder]
target = Target
returnTP = vector(mode = "numeric")
returnFP = vector(mode = "numeric")
scorePrev = Inf
FP = 0
TP = 0
i = 1
P = length(real[real == target])
N = length(real) - P
index = 1
while (i <= length(scores))
{
if(scores[i] != scorePrev)
{
returnTP[index] = TP/P
returnFP[index] = FP/N
scorePrev = scores[i]
index = index +1
}
if(real[i] == target)
{
TP = TP + 1
}else
{
FP = FP  +1
}
i = i+1
}
plot(returnFP, returnTP, type = "b")
abline(0,1)
Class = c("p","p","n","p","p","p","n","n","p","n",
"p","n","p","n","n","n","p","n","p","n")
Score = c("0.9","0.8","0.7","0.6","0.55","0.55","0.55","0.52","0.51","0.505",
"0.4","0.39","0.38","0.37","0.36","0.35","0.34","0.33","0.30","0.1")
Score = as.numeric(Score)
Target = "p"
returnTP = vector(mode = "numeric", length = length(Score))
returnFP = vector(mode = "numeric", length = length(scores))
generate_ROC(Score, Class, "p")
source(file = "Source/functions.R")#Reading datasets
Class = c("p","p","n","p","p","p","n","n","p","n",
"p","n","p","n","n","n","p","n","p","n")
Score = c("0.9","0.8","0.7","0.6","0.55","0.55","0.55","0.52","0.51","0.505",
"0.4","0.39","0.38","0.37","0.36","0.35","0.34","0.33","0.30","0.1")
Score = as.numeric(Score)
Target = "p"
returnTP = vector(mode = "numeric", length = length(Score))
returnFP = vector(mode = "numeric", length = length(scores))
generate_ROC(Score, Class, "p")
df_1 = read.csv("roc_1.csv", sep = ",")
df_1 = read.csv("roc_1.csv.txt", sep = ",")
View(df_1)
source(file = "Source/functions.R")#Reading datasets
Class = c("p","p","n","p","p","p","n","n","p","n",
"p","n","p","n","n","n","p","n","p","n")
Score = c("0.9","0.8","0.7","0.6","0.55","0.55","0.55","0.52","0.51","0.505",
"0.4","0.39","0.38","0.37","0.36","0.35","0.34","0.33","0.30","0.1")
Score = as.numeric(Score)
Target = "p"
generate_ROC(Score, Class, "p")
generate_ROC(Score, Class, "p")
df_1 = read.csv("roc_1.csv.txt", sep = ",")
generate_ROC(df_1$SCORE, df_1$CLASS, "p")
df_1 = read.csv("roc_1.csv.txt", sep = ",")
generate_ROC(df_1$SCORE, df_1$CLASS, "p")
df_1 = read.csv("roc_1.csv.txt", sep = ",")
generate_ROC(df_1$SCORE, df_1$CLASS, "p")
df_1 = read.csv("roc_1.csv.txt", sep = ",")
generate_ROC(df_1$SCORE, df_1$CLASS, "p")
df_1 = read.csv("roc_1.csv.txt", sep = ",")
generate_ROC(df_1$SCORE, df_1$CLASS, "p")
source(file = "Source/functions.R")#Reading datasets
generate_ROC(df_1$SCORE, df_1$CLASS, "p")
source(file = "Source/functions.R")#Reading datasets
df_1 = read.csv("roc_1.csv.txt", sep = ",")
generate_ROC(df_1$SCORE, df_1$CLASS, "p")
y = c(2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1)
scores = c(0.9, 0.8, 0.7, 0.6, 0.55, 0.54, 0.53, 0.52, 0.5, 0.5, 0.5, 0.5, 0.38, 0.37, 0.36, 0.35, 0.34, 0.33, 0.30, 0.1)
target = 2
generate_ROC(scores, y, "2")
y = c(2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1)
scores = c(0.9, 0.8, 0.7, 0.6, 0.55, 0.54, 0.53, 0.52, 0.5, 0.5, 0.5, 0.5, 0.38, 0.37, 0.36, 0.35, 0.34, 0.33, 0.30, 0.1)
class(y)
y = c(2, 2, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1)
scores = c(0.9, 0.8, 0.7, 0.6, 0.55, 0.54, 0.53, 0.52, 0.5, 0.5, 0.5, 0.5, 0.38, 0.37, 0.36, 0.35, 0.34, 0.33, 0.30, 0.1)
target = 2
generate_ROC(scores, y, 2)
source(file = "Source/functions.R")#Reading datasets
generate_ROC(scores, y, 2)
source(file = "Source/functions.R")#Reading datasets
generate_ROC(scores, y, 2)
source(file = "Source/functions.R")#Reading datasets
generate_ROC(scores, y, 2)
line(1)
line(1,1)
plot(cars, main = "Stopping Distance versus Speed")
lines(stats::lowess(cars))
generate_ROC(scores, y, 2)
source(file = "Source/functions.R")#Reading datasets
generate_ROC(scores, y, 2)
lines(1,1)
lines(1,2)
lines(1,2)
source(file = "Source/functions.R")#Reading datasets
generate_ROC(scores, y, 2)
source(file = "Source/functions.R")#Reading datasets
generate_ROC(scores, y, 2)
source(file = "Source/functions.R")#Reading datasets
generate_ROC(scores, y, 2)
source(file = "Source/functions.R")#Reading datasets
source(file = "Source/functions.R")#Reading datasets
generate_ROC(scores, y, 2)
source(file = "Source/functions.R")#Reading datasets
generate_ROC(scores, y, 2)
generate_ROC(scores, y, 2)
